name: Release

on:
  push:
    tags:
      - '*'

permissions:
  contents: write
  deployments: write
  packages: write

jobs:

# test publish c#
  # publish-java:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Set up Maven Central Repository
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '11'
  #         distribution: 'temurin'
  #         cache: maven
  #         server-id: ossrh
  #         server-username: MAVEN_USERNAME
  #         server-password: MAVEN_PASSWORD
  #         gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
  #         gpg-passphrase: MAVEN_GPG_PASSPHRASE
  #     - name: Publish package
  #       run: mvn --batch-mode -Prelease -Djgitver.use-version="$GITHUB_REF_NAME" deploy
  #       working-directory: java
  #       env:
  #         MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
  #         MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
  #         MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

  # publish-typescript:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #         registry-url: 'https://registry.npmjs.org'
  #     - name: Set the version
  #       working-directory: typescript
  #       run: cat <<< $(jq -r ".version = \"${GITHUB_REF_NAME}\"" package.json) > package.json
  #     - name: Add the readme file
  #       working-directory: typescript
  #       run: cp ../Readme.md .
  #     - name: Install dependencies and build
  #       working-directory: typescript
  #       run: npm ci && npm run clean && npm run build
  #     - name: Publish package on NPM
  #       working-directory: typescript
  #       run: npm publish --access public
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # publish-go:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup Go
  #       uses: actions/setup-go@v4
  #       with:
  #         go-version: '^1.20'
  #     - name: Release the tag
  #       working-directory: go
  #       run: |
  #         go mod tidy
  #         git tag "v${GITHUB_REF_NAME}"
  #         git tag "go/v${GITHUB_REF_NAME}"
  #         git push origin "v${GITHUB_REF_NAME}"
  #         git push origin "go/v${GITHUB_REF_NAME}"
  #         GOPROXY=proxy.golang.org go list -m "github.com/std-uritemplate/std-uritemplate@v$GITHUB_REF_NAME"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  # publish-python:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Python - Install Poetry
  #       uses: snok/install-poetry@v1
  #     - name: Python - Add Poetry to PATH
  #       run: echo "$HOME/.local/bin" >> $GITHUB_PATH
  #     - name: Copy Readme and set version
  #       working-directory: python
  #       run: |
  #         cp ../Readme.md .
  #         poetry version "${GITHUB_REF_NAME}"
  #     - name: Release to PyPi
  #       working-directory: python
  #       run: |
  #         poetry install
  #         poetry build
  #         poetry publish --username __token__ --password "${PYPI_TOKEN}"
  #       env:
  #         PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}

  publish-csharp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: C# - Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7
      - name: Release to NuGet
        working-directory: csharp
        run: |
          cp ../Readme.md ./
          export VERSION=${GITHUB_REF_NAME}
          dotnet pack
          dotnet nuget push bin/Release/Std.UriTemplate.${GITHUB_REF_NAME}.nupkg --api-key ${NUGET_TOKEN} --source https://api.nuget.org/v3/index.json
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
